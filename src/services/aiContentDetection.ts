
// AI-Generated Content Source Detection using Gemini and SynthID principles
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'AIzaSyAvsHmUnfT1um4K9aysmuo_jlwl4_8B7xM';
const GEMINI_BASE_URL = 'https://generativelanguage.googleapis.com/v1beta';

export interface AIContentDetectionResult {
  isAIGenerated: boolean;
  confidence: number;
  detectedModel?: string;
  indicators: {
    stylistic: string[];
    structural: string[];
    semantic: string[];
    metadata: string[];
  };
  generationProbability: number;
  humanLikelihood: number;
  explanation: string;
}

export const detectAIGeneratedContent = async (
  content: string,
  contentType: 'text' | 'image' | 'audio' = 'text'
): Promise<AIContentDetectionResult> => {
  try {
    const analysisPrompt = `You are an expert AI content detection system. Analyze the following ${contentType} content to determine if it was generated by AI.

Content to analyze: "${content}"

Look for these AI generation indicators:

For TEXT:
- Repetitive patterns or phrases
- Unusual word choices or syntax
- Lack of genuine personal experiences
- Overly perfect grammar/structure
- Generic or templated responses
- Inconsistent voice or tone
- Factual inconsistencies
- Watermark patterns (SynthID-style)

For IMAGES (if applicable):
- Digital artifacts from diffusion models
- Inconsistent lighting or physics
- Uncanny valley effects
- Repetitive textures or patterns
- Metadata anomalies

Common AI model signatures:
- GPT-style verbose explanations
- Claude-style structured responses
- ChatGPT conversation patterns
- Dall-E artistic styles
- Midjourney aesthetics

Provide detailed analysis in JSON format:
{
  "isAIGenerated": boolean,
  "confidence": number (0-1),
  "detectedModel": "suspected AI model or null",
  "indicators": {
    "stylistic": ["writing style indicators"],
    "structural": ["content structure indicators"],
    "semantic": ["meaning/context indicators"],
    "metadata": ["technical indicators"]
  },
  "generationProbability": number (0-1),
  "humanLikelihood": number (0-1),
  "explanation": "detailed explanation of findings"
}`;

    const response = await fetch(
      `${GEMINI_BASE_URL}/models/gemini-2.0-flash-exp:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: analysisPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.1,
            maxOutputTokens: 1200,
          },
        }),
      }
    );

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    const text = data.candidates?.[0]?.content?.parts?.[0]?.text || '{}';
    
    try {
      const result = JSON.parse(text);
      return result;
    } catch {
      return {
        isAIGenerated: false,
        confidence: 0.5,
        indicators: {
          stylistic: [],
          structural: [],
          semantic: [],
          metadata: []
        },
        generationProbability: 0.5,
        humanLikelihood: 0.5,
        explanation: 'AI content detection analysis inconclusive'
      };
    }
  } catch (error) {
    console.error('AI content detection error:', error);
    return {
      isAIGenerated: false,
      confidence: 0,
      indicators: {
        stylistic: [],
        structural: [],
        semantic: [],
        metadata: []
      },
      generationProbability: 0,
      humanLikelihood: 1,
      explanation: 'AI content detection service temporarily unavailable'
    };
  }
};
